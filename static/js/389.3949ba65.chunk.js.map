{"version":3,"file":"static/js/389.3949ba65.chunk.js","mappings":"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","sources":["Firebase/firebaseConfig.js","features/flashCards/FlashCardEditForm.jsx","utils/fetchMultipleData.js","features/flashCards/flashCardsSlice.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const dataBase = getFirestore(app);\nexport const storage = getStorage(app);\n","import { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nimport { useGetSingleFlashCardQuery, useUpdateFlashCardMutation } from './flashCardsSlice';\nimport { skipToken } from '@reduxjs/toolkit/query';\n\nconst FlashCardEditForm = () => {\n    const { flashCardId } = useParams();\n    const navigate = useNavigate();\n\n    const {\n        data: {\n            word = '',\n            translation = '',\n            picture = '',\n            phonetic = '',\n            partOfSpeech = '',\n            definition = '',\n        } = '',\n        isLoading: flashCardDataLoading,\n    } = useGetSingleFlashCardQuery(flashCardId ?? skipToken);\n    const [updateFlashCard, { isLoading }] = useUpdateFlashCardMutation();\n\n    const [newWord, setNewWord] = useState(word);\n    const [newTranslation, setNewTranslation] = useState(translation);\n    const [newPicture, setNewPicture] = useState(picture);\n    const [newPhonetic, setNewPhonetic] = useState(picture);\n    const [newPartOfSpeech, setNewPartOfSpeech] = useState(picture);\n    const [newDefinition, setNewDefinition] = useState(picture);\n\n    useEffect(() => {\n        setNewWord(word);\n        setNewTranslation(translation);\n        setNewPicture(picture);\n        setNewPhonetic(phonetic);\n        setNewPartOfSpeech(partOfSpeech);\n        setNewDefinition(definition);\n    }, [word, translation, picture, phonetic, partOfSpeech, definition]);\n\n    const canUpdate =\n        [newWord, newTranslation, newPicture, newPhonetic, newPartOfSpeech, newDefinition].every(\n            Boolean\n        ) && !flashCardDataLoading;\n\n    const handleUpdateFlashCard = async e => {\n        e.preventDefault();\n\n        if (canUpdate) {\n            const newData = {\n                word: newWord,\n                translation: newTranslation,\n                picture: newPicture,\n                phonetic: newPhonetic,\n                partOfSpeech: newPartOfSpeech,\n                definition: newDefinition,\n            };\n\n            try {\n                await updateFlashCard({ flashCardId, newData }).unwrap();\n                if (!isLoading) navigate('/flashCards');\n            } catch (error) {\n                console.log(`Update flash card is failed: `, error);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <Link\n                to={'/flashCards'}\n                className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center mt-5\"\n            >\n                Back\n            </Link>\n            <form onSubmit={handleUpdateFlashCard} className=\"max-w-sm m-10 mx-auto\">\n                <div className=\"mb-5\">\n                    <label htmlFor=\"word\" className=\"block mb-2 text-sm font-medium text-gray-900\">\n                        Word that you are translating\n                    </label>\n                    <input\n                        id=\"word\"\n                        type=\"text\"\n                        name=\"word\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"word\"\n                        value={newWord}\n                        onChange={e => setNewWord(e.target.value)}\n                        required\n                    />\n                </div>\n                <div className=\"mb-5\">\n                    <label\n                        htmlFor=\"translation\"\n                        className=\"block mb-2 text-sm font-medium text-gray-900\"\n                    >\n                        Translation that you need\n                    </label>\n                    <input\n                        id=\"translation\"\n                        type=\"text\"\n                        name=\"translation\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"translation\"\n                        value={newTranslation}\n                        onChange={e => setNewTranslation(e.target.value)}\n                        required\n                    />\n                </div>\n                <div className=\"mb-5\">\n                    <label htmlFor=\"image\" className=\"block mb-2 text-sm font-medium text-gray-900\">\n                        Image that you need - link format\n                    </label>\n                    <input\n                        id=\"picture\"\n                        type=\"text\"\n                        name=\"image\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"image\"\n                        value={newPicture}\n                        onChange={e => setNewPicture(e.target.value)}\n                        required\n                    />\n                </div>\n                <div className=\"mb-5\">\n                    <label\n                        htmlFor=\"phonetic\"\n                        className=\"block mb-2 text-sm font-medium text-gray-900\"\n                    >\n                        Phonetic\n                    </label>\n                    <input\n                        id=\"phonetic\"\n                        type=\"text\"\n                        name=\"phonetic\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"phonetic\"\n                        value={newPhonetic}\n                        onChange={e => setNewPhonetic(e.target.value)}\n                    />\n                </div>\n                <div className=\"mb-5\">\n                    <label\n                        htmlFor=\"partOfSpeech\"\n                        className=\"block mb-2 text-sm font-medium text-gray-900\"\n                    >\n                        Part - Of - Speech\n                    </label>\n                    <input\n                        id=\"partOfSpeech\"\n                        type=\"text\"\n                        name=\"partOfSpeech\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"part of speech\"\n                        value={newPartOfSpeech}\n                        onChange={e => setNewPartOfSpeech(e.target.value)}\n                    />\n                </div>\n                <div className=\"mb-5\">\n                    <label\n                        htmlFor=\"definition\"\n                        className=\"block mb-2 text-sm font-medium text-gray-900\"\n                    >\n                        Definition\n                    </label>\n                    <input\n                        id=\"definition\"\n                        type=\"text\"\n                        name=\"definition\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"definition\"\n                        value={newDefinition}\n                        onChange={e => setNewDefinition(e.target.value)}\n                    />\n                </div>\n                <div className=\"flex justify-center\">\n                    <button\n                        type=\"submit\"\n                        className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center\"\n                    >\n                        Submit changes\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default FlashCardEditForm;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst translateText = async (text, toLanguage = 'en') => {\n    const translationOptions = {\n        method: 'POST',\n        url: 'https://microsoft-translator-text.p.rapidapi.com/translate',\n        params: {\n            'to[0]': toLanguage,\n            'api-version': '3.0',\n        },\n        headers: {\n            'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\n        },\n        data: [\n            {\n                Text: text,\n            },\n        ],\n    };\n\n    try {\n        const response = await axios(translationOptions);\n\n        return response?.data[0]?.translations[0]?.text.toLowerCase();\n    } catch (error) {\n        console.error('translateText', error);\n        return null;\n    }\n};\n\nconst getDetails = async text => {\n    let detailedData = {\n        phonetic: '',\n        audio: '',\n        partOfSpeech: '',\n        definition: '',\n    };\n\n    const validate = /\\s/g.test(text);\n\n    if (validate) {\n        return detailedData;\n    }\n\n    try {\n        const response = await axios(`https://api.dictionaryapi.dev/api/v2/entries/en/${text}`);\n\n        detailedData = {\n            phonetic:\n                response?.data.find(item => item.phonetic !== undefined)?.phonetic ?? `/${text}/`,\n            audio: response?.data[0].phonetics.find(item => item.audio !== '')?.audio ?? '',\n            partOfSpeech: response?.data[0].meanings[0]?.partOfSpeech ?? '',\n            definition: response?.data[0].meanings[0]?.definitions[0].definition ?? '',\n        };\n\n        return detailedData;\n    } catch (error) {\n        console.log('getDetails', error);\n        return detailedData;\n    }\n};\n\nconst fetchUnsplashPhoto = async searchQuery => {\n    try {\n        const response = await axios(\n            `${process.env.REACT_APP_UNSPLASH_BASE_URL}/search/photos?page=1&per_page=1&orientation=landscape&query=${searchQuery}&client_id=${process.env.REACT_APP_UNSPLASH_KEY_ID}`\n        );\n        return response?.data?.results[0]?.urls?.regular || 'https://i.ibb.co/2NVKDq2/1.png';\n    } catch (error) {\n        console.error('fetchUnsplashPhoto', error);\n        return 'https://i.ibb.co/2NVKDq2/1.png';\n    }\n};\n\nexport const fetchMultipleData = async (searchQuery, translateTo) => {\n    try {\n        const translation = await translateText(searchQuery, translateTo);\n\n        if (translation === searchQuery) {\n            toast.info(\n                'There is something wrong  in your text, it may be a typo or native and target languages are the same! 🏳'\n            );\n\n            return null;\n        }\n\n        const getPictureInEng = await translateText(searchQuery);\n        const unsplashPhoto = await fetchUnsplashPhoto(getPictureInEng);\n        const { phonetic, audio, partOfSpeech, definition } = await getDetails(getPictureInEng);\n\n        const response = {\n            word: searchQuery,\n            translation,\n            phonetic,\n            audio,\n            partOfSpeech,\n            definition,\n            picture: unsplashPhoto,\n        };\n\n        return response;\n    } catch (error) {\n        console.error('fetchMultipleData', error);\n    }\n};\n","import { apiSlice } from '../api/apiSlice';\nimport { collection, deleteDoc, doc, getDoc, getDocs, setDoc, updateDoc } from 'firebase/firestore';\nimport { fetchMultipleData } from '../../utils/fetchMultipleData';\n\nimport { dataBase } from '../../Firebase/firebaseConfig';\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getFlashCards: builder.query({\n            queryFn: async () => {\n                try {\n                    const querySnapshot = await getDocs(collection(dataBase, 'flashCards'));\n                    const data = querySnapshot.docs.map(doc => ({\n                        id: doc.id,\n                        ...doc.data(),\n                    }));\n                    return { data };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            providesTags: ['FlashCards'],\n        }),\n\n        getSingleFlashCard: builder.query({\n            queryFn: async flashCardId => {\n                try {\n                    const docRef = doc(dataBase, 'flashCards', flashCardId);\n                    const snapshot = await getDoc(docRef);\n                    return { data: snapshot.data() };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            providesTags: ['FlashCards'],\n        }),\n\n        clearFlashCards: builder.mutation({\n            queryFn: async () => {\n                try {\n                    const docs = await getDocs(collection(dataBase, 'flashCards'));\n                    const deletePromises = docs.docs.map(doc => deleteDoc(doc.ref));\n\n                    await Promise.all(deletePromises);\n\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n\n        addFlashCard: builder.mutation({\n            queryFn: async ({ trimmedWord, language }) => {\n                try {\n                    const result = await fetchMultipleData(trimmedWord, language);\n\n                    if (!result) {\n                        return { data: 'ok' };\n                    }\n\n                    const docRef = doc(collection(dataBase, 'flashCards'), Date.now().toString());\n                    await setDoc(docRef, {\n                        ...result,\n                    });\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n\n        deleteFlashCard: builder.mutation({\n            queryFn: async id => {\n                try {\n                    await deleteDoc(doc(dataBase, 'flashCards', id));\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n\n        updateFlashCard: builder.mutation({\n            queryFn: async ({ flashCardId, newData }) => {\n                try {\n                    await updateDoc(doc(dataBase, 'flashCards', flashCardId), {\n                        ...newData,\n                    });\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n    }),\n});\n\nexport const {\n    useGetFlashCardsQuery,\n    useGetSingleFlashCardQuery,\n    useClearFlashCardsMutation,\n    useAddFlashCardMutation,\n    useDeleteFlashCardMutation,\n    useUpdateFlashCardMutation,\n} = extendedApiSlice;\n"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","dataBase","getFirestore","getStorage","FlashCardEditForm","flashCardId","useParams","navigate","useNavigate","data","word","translation","picture","phonetic","partOfSpeech","definition","isLoading","flashCardDataLoading","useGetSingleFlashCardQuery","skipToken","updateFlashCard","useUpdateFlashCardMutation","newWord","setNewWord","useState","newTranslation","setNewTranslation","newPicture","setNewPicture","newPhonetic","setNewPhonetic","newPartOfSpeech","setNewPartOfSpeech","newDefinition","setNewDefinition","useEffect","canUpdate","every","Boolean","_jsxs","children","_jsx","Link","to","className","onSubmit","async","e","preventDefault","newData","unwrap","error","console","log","htmlFor","id","type","name","placeholder","value","onChange","target","required","translateText","text","translationOptions","method","url","params","arguments","length","undefined","headers","Text","_response$data$","_response$data$$trans","response","axios","translations","toLowerCase","fetchMultipleData","searchQuery","translateTo","toast","info","getPictureInEng","unsplashPhoto","_response$data","_response$data$result","_response$data$result2","concat","results","urls","regular","fetchUnsplashPhoto","audio","detailedData","test","_response$data$find$p","_response$data$find","_response$data$0$phon","_response$data$0$phon2","_response$data$0$mean","_response$data$0$mean2","_response$data$0$mean3","_response$data$0$mean4","find","item","phonetics","meanings","definitions","getDetails","extendedApiSlice","apiSlice","injectEndpoints","endpoints","builder","getFlashCards","query","queryFn","querySnapshot","getDocs","collection","docs","map","doc","providesTags","getSingleFlashCard","docRef","getDoc","clearFlashCards","mutation","deletePromises","deleteDoc","ref","Promise","all","invalidatesTags","addFlashCard","trimmedWord","language","_ref","result","Date","now","toString","setDoc","deleteFlashCard","_ref2","updateDoc","useGetFlashCardsQuery","useClearFlashCardsMutation","useAddFlashCardMutation","useDeleteFlashCardMutation"],"sourceRoot":""}