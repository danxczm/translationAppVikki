{"version":3,"file":"static/js/389.757b3976.chunk.js","mappings":"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","sources":["Firebase/firebaseConfig.js","features/flashCards/FlashCardEditForm.jsx","utils/fetchMultipleData.js","features/flashCards/flashCardsSlice.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const dataBase = getFirestore(app);\nexport const storage = getStorage(app);\n","import { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nimport { useGetSingleFlashCardQuery, useUpdateFlashCardMutation } from './flashCardsSlice';\nimport { skipToken } from '@reduxjs/toolkit/query';\n\nconst FlashCardEditForm = () => {\n    const { flashCardId } = useParams();\n    const navigate = useNavigate();\n\n    const {\n        data: { word = '', translation = '', picture = '' } = '',\n        isLoading: flashCardDataLoading,\n    } = useGetSingleFlashCardQuery(flashCardId ?? skipToken);\n    const [updateFlashCard, { isLoading }] = useUpdateFlashCardMutation();\n\n    const [newWord, setNewWord] = useState(word);\n    const [newTranslation, setNewTranslation] = useState(translation);\n    const [newPicture, setNewPicture] = useState(picture);\n\n    useEffect(() => {\n        setNewWord(word);\n        setNewTranslation(translation);\n        setNewPicture(picture);\n    }, [word, translation, picture]);\n\n    const canUpdate = [newWord, newTranslation, newPicture].every(Boolean) && !flashCardDataLoading;\n\n    const handleUpdateFlashCard = async e => {\n        e.preventDefault();\n\n        if (canUpdate) {\n            const newData = {\n                word: newWord,\n                translation: newTranslation,\n                picture: newPicture,\n            };\n\n            try {\n                await updateFlashCard({ flashCardId, newData }).unwrap();\n                if (!isLoading) navigate('/flashCards');\n            } catch (error) {\n                console.log(`Update flash card is failed: `, error);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <Link\n                to={'/flashCards'}\n                className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center mt-5\"\n            >\n                Back\n            </Link>\n            <form onSubmit={handleUpdateFlashCard} className=\"max-w-sm mx-auto m-10\">\n                <div className=\"mb-5\">\n                    <label htmlFor=\"word\" className=\"block mb-2 text-sm font-medium text-gray-900\">\n                        Word that you are translating\n                    </label>\n                    <input\n                        id=\"word\"\n                        type=\"text\"\n                        name=\"word\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"word\"\n                        value={newWord}\n                        onChange={e => setNewWord(e.target.value)}\n                        required\n                    />\n                </div>\n                <div className=\"mb-5\">\n                    <label\n                        htmlFor=\"translation\"\n                        className=\"block mb-2 text-sm font-medium text-gray-900\"\n                    >\n                        Translation that you need\n                    </label>\n                    <input\n                        id=\"translation\"\n                        type=\"text\"\n                        name=\"translation\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"translation\"\n                        value={newTranslation}\n                        onChange={e => setNewTranslation(e.target.value)}\n                        required\n                    />\n                </div>\n                <div className=\"mb-5\">\n                    <label htmlFor=\"image\" className=\"block mb-2 text-sm font-medium text-gray-900\">\n                        Image that you need - link format\n                    </label>\n                    <input\n                        id=\"picture\"\n                        type=\"text\"\n                        name=\"image\"\n                        className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                        placeholder=\"image\"\n                        value={newPicture}\n                        onChange={e => setNewPicture(e.target.value)}\n                        required\n                    />\n                </div>\n                <div className=\"flex justify-center\">\n                    <button\n                        type=\"submit\"\n                        className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center\"\n                    >\n                        Submit changes\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default FlashCardEditForm;\n","import axios from 'axios';\n\nconst translateText = async (text, toLanguage = 'en') => {\n    const translationOptions = {\n        method: 'POST',\n        url: 'https://microsoft-translator-text.p.rapidapi.com/translate',\n        params: {\n            'to[0]': toLanguage,\n            'api-version': '3.0',\n        },\n        headers: {\n            'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\n        },\n        data: [\n            {\n                Text: text,\n            },\n        ],\n    };\n\n    try {\n        const response = await axios(translationOptions);\n        return response?.data[0]?.translations[0]?.text;\n    } catch (error) {\n        console.error('translateText', error);\n        return null;\n    }\n};\n\nconst fetchUnsplashPhoto = async searchQuery => {\n    try {\n        const response = await axios(\n            `${process.env.REACT_APP_UNSPLASH_BASE_URL}/search/photos?page=1&per_page=1&orientation=landscape&query=${searchQuery}&client_id=${process.env.REACT_APP_UNSPLASH_KEY_ID}`\n        );\n        return response?.data?.results[0]?.urls?.regular || 'https://i.ibb.co/2NVKDq2/1.png';\n    } catch (error) {\n        console.error('fetchUnsplashPhoto', error);\n        return 'https://i.ibb.co/2NVKDq2/1.png';\n    }\n};\n\nexport const fetchMultipleData = async (searchQuery, translateTo) => {\n    try {\n        const translation = await translateText(searchQuery, translateTo);\n        const getPictureInEng = await translateText(searchQuery);\n        const unsplashPhoto = await fetchUnsplashPhoto(getPictureInEng);\n\n        const response = {\n            word: searchQuery,\n            translation,\n            picture: unsplashPhoto,\n        };\n\n        return response;\n    } catch (error) {\n        console.error('fetchMultipleData', error);\n    }\n};\n","import { apiSlice } from '../api/apiSlice';\nimport { collection, deleteDoc, doc, getDoc, getDocs, setDoc, updateDoc } from 'firebase/firestore';\nimport { fetchMultipleData } from '../../utils/fetchMultipleData';\n\nimport { dataBase } from '../../Firebase/firebaseConfig';\nimport { toast } from 'react-toastify';\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getFlashCards: builder.query({\n            queryFn: async () => {\n                try {\n                    const querySnapshot = await getDocs(collection(dataBase, 'flashCards'));\n                    const data = querySnapshot.docs.map(doc => ({\n                        id: doc.id,\n                        ...doc.data(),\n                    }));\n                    return { data };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            providesTags: ['FlashCards'],\n        }),\n\n        getSingleFlashCard: builder.query({\n            queryFn: async flashCardId => {\n                try {\n                    const docRef = doc(dataBase, 'flashCards', flashCardId);\n                    const snapshot = await getDoc(docRef);\n                    return { data: snapshot.data() };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            providesTags: ['FlashCards'],\n        }),\n\n        clearFlashCards: builder.mutation({\n            queryFn: async () => {\n                try {\n                    const docs = await getDocs(collection(dataBase, 'flashCards'));\n                    const deletePromises = docs.docs.map(doc => deleteDoc(doc.ref));\n\n                    await Promise.all(deletePromises);\n\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n\n        addFlashCard: builder.mutation({\n            queryFn: async ({ searchWord, language, languageFullName }) => {\n                try {\n                    const result = await fetchMultipleData(searchWord, language);\n\n                    // ! not sure this should be here\n                    const { translation, word } = result;\n\n                    if (translation.toLowerCase() === word.toLowerCase()) {\n                        return toast.error(\n                            `You can't translate ${languageFullName} to ${languageFullName}! Click the checkbox to select a language for translation!`\n                        );\n                    }\n                    // !\n\n                    const docRef = doc(collection(dataBase, 'flashCards'), Date.now().toString());\n                    await setDoc(docRef, {\n                        ...result,\n                    });\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n\n        deleteFlashCard: builder.mutation({\n            queryFn: async id => {\n                try {\n                    await deleteDoc(doc(dataBase, 'flashCards', id));\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n\n        updateFlashCard: builder.mutation({\n            queryFn: async ({ flashCardId, newData }) => {\n                try {\n                    await updateDoc(doc(dataBase, 'flashCards', flashCardId), {\n                        ...newData,\n                    });\n                    return { data: 'ok' };\n                } catch (error) {\n                    return { error };\n                }\n            },\n            invalidatesTags: ['FlashCards'],\n        }),\n    }),\n});\n\nexport const {\n    useGetFlashCardsQuery,\n    useGetSingleFlashCardQuery,\n    useClearFlashCardsMutation,\n    useAddFlashCardMutation,\n    useDeleteFlashCardMutation,\n    useUpdateFlashCardMutation,\n} = extendedApiSlice;\n"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","dataBase","getFirestore","getStorage","FlashCardEditForm","flashCardId","useParams","navigate","useNavigate","data","word","translation","picture","isLoading","flashCardDataLoading","useGetSingleFlashCardQuery","skipToken","updateFlashCard","useUpdateFlashCardMutation","newWord","setNewWord","useState","newTranslation","setNewTranslation","newPicture","setNewPicture","useEffect","canUpdate","every","Boolean","_jsxs","children","_jsx","Link","to","className","onSubmit","async","e","preventDefault","newData","unwrap","error","console","log","htmlFor","id","type","name","placeholder","value","onChange","target","required","translateText","text","translationOptions","method","url","params","arguments","length","undefined","headers","Text","_response$data$","_response$data$$trans","response","axios","translations","fetchMultipleData","searchQuery","translateTo","getPictureInEng","unsplashPhoto","_response$data","_response$data$result","_response$data$result2","concat","results","urls","regular","fetchUnsplashPhoto","extendedApiSlice","apiSlice","injectEndpoints","endpoints","builder","getFlashCards","query","queryFn","querySnapshot","getDocs","collection","docs","map","doc","providesTags","getSingleFlashCard","docRef","getDoc","clearFlashCards","mutation","deletePromises","deleteDoc","ref","Promise","all","invalidatesTags","addFlashCard","searchWord","language","languageFullName","_ref","result","toLowerCase","toast","Date","now","toString","setDoc","deleteFlashCard","_ref2","updateDoc","useGetFlashCardsQuery","useClearFlashCardsMutation","useAddFlashCardMutation","useDeleteFlashCardMutation"],"sourceRoot":""}